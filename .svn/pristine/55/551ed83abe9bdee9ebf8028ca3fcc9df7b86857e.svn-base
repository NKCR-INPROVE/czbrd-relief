/* *****************************************************************************
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package cz.incad.czbrd.bf;

import com.amaio.plaant.businessFunctions.*;
import com.amaio.plaant.sync.Field;
import com.amaio.plaant.sync.Record;
import cz.incad.czbrd.EvidenceMereniEntity;
import cz.incad.czbrd.EvidenceMereniPrilohaEntity;
import cz.incad.czbrd.ExemplarEntity;
import cz.incad.czbrd.PrilohaEntity;
import cz.incad.relief3.core.BussinesFunction_A;
import cz.incad.relief3.core.Record_A;
import java.util.logging.Level;
import java.util.logging.Logger;

/** ****************************************************************************
 *
 * @author martin.novacek@incad.cz
 */
public class ExemplarEvidujZasah extends BussinesFunction_A {
    public static final String EVIDENCE_MERENI_CLASSNAME            = "cz.incad.czbrd.EvidenceMereni";
    public static final String EVIDENCE_MERENI_PRILOHA_CLASSNAME    = "cz.incad.czbrd.EvidenceMereniPriloha";
    public static final String EXEMPLAR_CLASSNAME                   = "cz.incad.czbrd.Exemplar";
    
    /* *************************************************************************
     * Vnořená třída.
     * Lze do ní uložit informace o recordu
     */
    class OneRecordInfo {
        private Object recID;
        private Object recCreUser;
        private Object recCreDate;
        private Object recEdiUser;
        private Object recEdiDate;
        
        /** ********************************************************************
         * Konstruktor
         */
        OneRecordInfo(Record rec) {
            this.recID      = rec.getSimpleField(Record_A.f_recID).getValue();
            this.recCreUser = rec.getSimpleField(Record_A.f_recCreUser).getValue();
            this.recCreDate = rec.getSimpleField(Record_A.f_recCreDate).getValue();
            this.recEdiUser = rec.getSimpleField(Record_A.f_recEdiUser).getValue();
            this.recEdiDate = rec.getSimpleField(Record_A.f_recEdiDate).getValue();
        }

        /** ********************************************************************
         * Metoda nastaví Záznamu z parametru nové hodnoty
         * @param rec 
         */
        public void setRecord(Record rec) {
            rec.getSimpleField(Record_A.f_recID).setValue(this.recID);
            rec.getSimpleField(Record_A.f_recCreUser).setValue(this.recCreUser);
            rec.getSimpleField(Record_A.f_recCreDate).setValue(this.recCreDate);
            rec.getSimpleField(Record_A.f_recEdiUser).setValue(this.recEdiUser);
            rec.getSimpleField(Record_A.f_recEdiDate).setValue(this.recEdiDate);
        }

    }


    /** ************************************************************************
     * 
     * @return
     * @throws ValidationException
     * @throws WizardException 
     */
    public WizardMessage startWizard() throws ValidationException, WizardException {
        if (getWCC().getSelectedRecords().getRecordsCount() != 1) throw new WizardException("Pro tuto funkci musí být vybrán právě jeden záznam.");
        return null;
    }

    /** ************************************************************************
     * 
     * @param panelName
     * @return
     * @throws ValidationException
     * @throws WizardException 
     */
    public WizardMessage panelLeave(String panelName) throws ValidationException, WizardException {
        return null;
    }

    /** ************************************************************************
     * 
     * @return
     * @throws ValidationException
     * @throws WizardException
     * @throws ApplicationErrorException 
     */
    public WizardMessage runBusinessMethod() throws ValidationException, WizardException, ApplicationErrorException {
        int countEvidenceMereni,
            countPriloha;
        String idCislo_EvidenceMereni;
        Record recExemplar,
               recEvidenceMereni,
               recEvidenceMereniPriloha,
               recPriloha,
               recEMPriloha_evidenceMereni,
               recEMPriloha_exemplar;
        RecordsIterator
            ritPriloha_exemplar,
            ritEMPriloha_evidenceMereni;
        OneRecordInfo recInfo_recEvidenceMereni,
                      recInfo_recEvidenceMereniPriloha;
        

        //Načteme záznam Exempláře se kterým budeme pracovat
        recExemplar = getWCC().getSelectedRecords().nextRecord();
        //založíme novej záznam evidence měření v historii měření.
        getWCC().addRootDomain(cz.incad.relief3.core.tools.Commons.getDomain(EXEMPLAR_CLASSNAME, getWCC()));
        try {
            recEvidenceMereni = getWCC().create(cz.incad.relief3.core.tools.Commons.getDomain(EVIDENCE_MERENI_CLASSNAME, getWCC()));
            recExemplar.getTableField(ExemplarEntity.F_tEvidenceMereni_TAB).addKey(recEvidenceMereni.getKey());
            idCislo_EvidenceMereni = (String)recEvidenceMereni.getSimpleField(EvidenceMereniEntity.f_recID).getValue();
        } catch (AddException ex) {
            Logger.getLogger(ExemplarEvidujZasah.class.getName()).log(Level.SEVERE, null, ex);
            throw new WizardException("V programu nastala neočeávaná chyba, kontaktujte tvůrce aplikace.");
        }
        
        //Zpracujeme přílohy - založíme strukturu
        ritPriloha_exemplar = recExemplar.getTableField(ExemplarEntity.F_tPriloha_TAB).getTableRecords();
        countPriloha = ritPriloha_exemplar.getRecordsCount();
        for (int i = 0; i < countPriloha; i++) {
            try {
                //založíme novej záznam evidence měření v evidenci měření z historie měření.
                recEvidenceMereniPriloha = getWCC().create(cz.incad.relief3.core.tools.Commons.getDomain(EVIDENCE_MERENI_PRILOHA_CLASSNAME, getWCC()));
                recEvidenceMereni.getTableField(EvidenceMereniEntity.f_tEMPriloha_TAB).addKey(recEvidenceMereniPriloha.getKey());

            } catch (AddException ex) {
                Logger.getLogger(ExemplarEvidujZasah.class.getName()).log(Level.SEVERE, null, ex);
                throw new WizardException("V programu nastala neočeávaná chyba, kontaktujte tvůrce aplikace.");
            }
        }
        //Uložíme nově založené záznay evidence měření příloha a příloha evidence měření příloha
        getWCC().commit();

        //Provedeme migraci dat evidence měření pro exemplář
        getWCC().addRootDomain(cz.incad.relief3.core.tools.Commons.getDomain(EVIDENCE_MERENI_CLASSNAME, getWCC()));
        //Načteme záznam Exempláře se kterým budeme pracovat - po commitu musíme znovu
        recExemplar = getWCC().getSelectedRecords().nextRecord();
        RecordsIterator ritEvidenceMereni = recExemplar.getTableField(ExemplarEntity.F_tEvidenceMereni_TAB).getTableRecords();
        countEvidenceMereni = ritEvidenceMereni.getRecordsCount();
        for(int i = 0; i < countEvidenceMereni; i++) {
            recEvidenceMereni = ritEvidenceMereni.nextRecord();
            if (idCislo_EvidenceMereni.equals(recEvidenceMereni.getSimpleField(EvidenceMereniEntity.f_recID).getValue())) break;
        }

        //Uložíme si Record info o záznamu kompozitního pole z exempláře
        recInfo_recEvidenceMereni = new OneRecordInfo(recEvidenceMereni);
        migrate(recExemplar.getCompositeField(ExemplarEntity.F_cEvidenceMereni_COM).getCompositeRecord(), recEvidenceMereni);
        //Vyčistíme data ze záznamu v komponentě
        clear(recExemplar.getCompositeField(ExemplarEntity.F_cEvidenceMereni_COM).getCompositeRecord());
        //Nastavíme RECORD hodnoty vyčištěnému záznamu v komponentě
        recInfo_recEvidenceMereni.setRecord(recExemplar.getCompositeField(ExemplarEntity.F_cEvidenceMereni_COM).getCompositeRecord());

        ritEMPriloha_evidenceMereni = recEvidenceMereni.getTableField(EvidenceMereniEntity.f_tEMPriloha_TAB).getTableRecords();
        ritPriloha_exemplar = recExemplar.getTableField(ExemplarEntity.F_tPriloha_TAB).getTableRecords();
        countPriloha = ritPriloha_exemplar.getRecordsCount();

        for (int i = 0; i < countPriloha; i++) {
            recPriloha = ritPriloha_exemplar.nextRecord();
            recEMPriloha_evidenceMereni = ritEMPriloha_evidenceMereni.nextRecord();
            recEMPriloha_exemplar = recPriloha.getCompositeField(PrilohaEntity.F_cEvidenceMereniPriloha_COM).getCompositeRecord();
            recInfo_recEvidenceMereniPriloha = new OneRecordInfo(recEMPriloha_evidenceMereni);
            migrate(recEMPriloha_exemplar, recEMPriloha_evidenceMereni);
            //propojíme EvidenciMěřeníPřílohy s Přílohou
            recEMPriloha_evidenceMereni.getReferencedField(EvidenceMereniPrilohaEntity.f_rPriloha_REF).setKey(recPriloha.getKey());
            clear(recEMPriloha_exemplar);
            recInfo_recEvidenceMereniPriloha.setRecord(recPriloha.getCompositeField(PrilohaEntity.F_cEvidenceMereniPriloha_COM).getCompositeRecord());
        }
        getWCC().commit();
        return null;
    }

    /** ************************************************************************
     * Přesune všechna pole typu SimpleField a klíče v polích typu TableField ze záznamu Source do Target
     * @param source
     * @param target 
     */
    private void migrate(Record source, Record target) {
        Field[] pole = source.getFields();
        RecordsIterator rit;
        int countRit;
        Record rec;

        for (int i = 0; i < pole.length; i++) {
            if (pole[i].getType() == Field.SIMPLE) {
                target.getSimpleField(pole[i].getLocalName()).setValue(pole[i].getValue());
            } else if (pole[i].getType() == Field.TABLE) {
                rit = source.getTableField(pole[i].getLocalName()).getTableRecords();
                countRit = rit.getRecordsCount();
                for (int j = 0; j < countRit; j++) {
                    rec = rit.nextRecord();
                    target.getTableField(pole[i].getLocalName()).addKey(rec.getKey());
                }
            }
        }
    }

    /** ************************************************************************
     * Všechna pole typu SimpleField nastaví na NULL
     * @param source 
     */
    private void clear(Record source) {
        Field[] pole = source.getFields();
        
        for (int i = 0; i < pole.length; i++) {
            if (pole[i].getType() == Field.SIMPLE) {
                source.getSimpleField(pole[i].getLocalName()).setValue(null);
            }
        }
    }

}
