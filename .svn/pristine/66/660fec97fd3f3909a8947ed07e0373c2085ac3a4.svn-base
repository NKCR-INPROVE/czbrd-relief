/* *****************************************************************************
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

package cz.incad.czbrd;

import com.amaio.plaant.businessFunctions.AddException;
import com.amaio.plaant.businessFunctions.AnnotationKeys;
import com.amaio.plaant.businessFunctions.UpdateException;
import com.amaio.plaant.businessFunctions.ValidationException;
import com.amaio.plaant.sync.Record;
import com.amaio.util.Log;
//import com.amaio.util.Log;
import cz.incad.czbrd.dLists.SLdruhZasahuEnum;
import cz.incad.relief3.core.Record_A;
//import cz.incad.relief3.core.tools.DirectConnection;
//import cz.incad.relief3.core.tools.NumericSeries;
//import cz.incad.relief3.core.tools.ReliefLogger;
//import cz.incad.relief3.core.tools.Utilities;
//import java.sql.Connection;
//import java.sql.ResultSet;
//import java.sql.SQLException;
//import java.sql.Statement;

/** ****************************************************************************
 *
 * @author martin
 */
public class EvidenceMereniEntity extends Record_A {
    public static final String F_posObalka_STR              = "posObalka";
    public static final String F_druhZasahu_STR             = "druhZasahu";
    public static final String F_pObaMechChybCast_STR       = "pObaMechChybCast";
    public static final String F_pObaMechPrehPrek_STR       = "pObaMechPrehPrek";
    public static final String F_pObaMechCinHlodHmyz_STR    = "pObaMechCinHlodHmyz";
    public static final String F_pObaMechKrehkost_STR       = "pObaMechKrehkost";
    public static final String F_pObaMechLepPas_STR         = "pObaMechLepPas";
    public static final String F_pObaMechNeni_STR           = "pObaMechNeni";
    public static final String F_pObaBioHmyz_STR            = "pObaBioHmyz";
    public static final String F_pObaBioHlodavci_STR        = "pObaBioHlodavci";
    public static final String F_pObaBioPlisBak_STR         = "pObaBioPlisBak";
    public static final String F_pObaBioNeni_STR            = "pObaBioNeni";
    public static final String F_pObaChemVoda_STR           = "pObaChemVoda";
    public static final String F_pObaChemJinTek_STR         = "pObaChemJinTek";
    public static final String F_pObaChemNeni_STR           = "pObaChemNeni";
    public static final String F_pObaChemMast_STR           = "pObaChemMast";
    public static final String F_pObaChemPrach_STR          = "pObaChemPrach";
    public static final String F_pObaChemTepPos_STR         = "pObaChemTepPos";
    public static final String F_pObaChemBarSkv_STR         = "pObaChemBarSkv";
    public static final String F_pObaChemNecTex_STR         = "pObaChemNecTex";
    public static final String F_pObaChemZdeg_STR           = "pObaChemZdeg";
    public static final String F_tEMPriloha_TAB             = "tEMPriloha";
    public static final String F_rExemplar_REF              = "rExemplar";

    //public static final String f_ = "";

//    @Override
//    public Record onGetRecord(Record rec) {
//        rec.setAnnotation(AnnotationKeys.READ_ONLY_SECURITY_PROPERTY, AnnotationKeys.TRUE_VALUE);
//        rec.setAnnotation(AnnotationKeys.REMOVE_FORBIDDEN_SECURITY_PROPERTY, AnnotationKeys.TRUE_VALUE);
////        Log.err("XXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
////        Log.err(rec.toString());
////        //v případě, že existuje vazba na Exemplář přes referenci F_rExemplar_REF
////        //nastavíme záznam pouze pro čtení a nesmazatelný
////        if (rec.getReferencedField(F_rExemplar_REF).getReferencedRecord() != null) {
////            rec.setAnnotation(AnnotationKeys.READ_ONLY_SECURITY_PROPERTY, AnnotationKeys.TRUE_VALUE);
////            rec.setAnnotation(AnnotationKeys.REMOVE_FORBIDDEN_SECURITY_PROPERTY, AnnotationKeys.TRUE_VALUE);
////            Log.err("Zaznamu jsme nastavili ze je pouze pro cteni a nejde smazat: " + rec.getSimpleField(F_recID_STR).getValue());
////        } else {
////            Log.err("PODMINKA NESPLNENA");
////        }
////        Log.err("YYYYYYYYYYYYYYYYYYYYYYYYYYYYY");
//        return rec;
//    }

    /** ************************************************************************
     * 
     * @param rec
     * @return
     * @throws AddException
     */
    @Override
    public Record onCreateLocal(Record rec) throws AddException {
        rec = super.onCreateLocal(rec);
        //Nastavíme defaultní hodnoty
        rec.getSimpleField(F_druhZasahu_STR).setValue(SLdruhZasahuEnum.puvodnistav.toString());
        return rec;
    }

    /** ************************************************************************
     *
     * @param rec
     * @return
     * @throws AddException
     * @throws ValidationException
     */
    @Override
    public Record onCreate(Record rec) throws AddException, ValidationException {
        rec = super.onCreate(rec);
        return this.onCreateUpdate(rec);
    }

    /** ************************************************************************
     *
     * @param rec
     * @return
     * @throws ValidationException
     * @throws UpdateException
     */
    @Override
    public Record onUpdate(Record rec) throws ValidationException, UpdateException {
        rec = super.onUpdate(rec);
        return this.onCreateUpdate(rec);
    }

    /** ************************************************************************
     *
     * @param rec
     * @return
     */
    private Record onCreateUpdate(Record rec) throws ValidationException {
//        Connection conn = DirectConnection.getConnection();
//        Statement stmt = null;
//        ResultSet rs = null;

        //Když je vybrána Obálka není, tak je hodnota nastavena na NULL
        if ("neni".equals(rec.getSimpleField(F_posObalka_STR).getValue()) || rec.getSimpleField(F_posObalka_STR).getValue() == null) {
            rec.getSimpleField(F_pObaMechChybCast_STR).setValue(false);
            rec.getSimpleField(F_pObaMechPrehPrek_STR).setValue(false);
            rec.getSimpleField(F_pObaMechCinHlodHmyz_STR).setValue(false);
            rec.getSimpleField(F_pObaMechKrehkost_STR).setValue(false);
            rec.getSimpleField(F_pObaMechLepPas_STR).setValue(false);
            rec.getSimpleField(F_pObaMechNeni_STR).setValue(false);
            rec.getSimpleField(F_pObaBioHmyz_STR).setValue(false);
            rec.getSimpleField(F_pObaBioHlodavci_STR).setValue(false);
            rec.getSimpleField(F_pObaBioPlisBak_STR).setValue(false);
            rec.getSimpleField(F_pObaBioNeni_STR).setValue(false);
            rec.getSimpleField(F_pObaChemNeni_STR).setValue(false);
            rec.getSimpleField(F_pObaChemVoda_STR).setValue(false);
            rec.getSimpleField(F_pObaChemJinTek_STR).setValue(false);
            rec.getSimpleField(F_pObaChemMast_STR).setValue(false);
            rec.getSimpleField(F_pObaChemPrach_STR).setValue(false);
            rec.getSimpleField(F_pObaChemTepPos_STR).setValue(false);
            rec.getSimpleField(F_pObaChemBarSkv_STR).setValue(false);
            rec.getSimpleField(F_pObaChemNecTex_STR).setValue(false);
            rec.getSimpleField(F_pObaChemZdeg_STR).setValue(false);
        }

//        //Kontrola na cislo zaznamu, aby nebylo duplicitni
//        try {
//            if (rec.getSimpleField(f_recID).getValue() != null) {
//                stmt = conn.createStatement();
//                rs = stmt.executeQuery("select count(recID) from EvidenceMereni where recID = '" + rec.getSimpleField(f_recID).getValue() + "'");
//                rs.next();
//                if (rs.getInt(1) > 1) {
//                    String seriename = Utilities.getClassNameEntity(getClass().getName()) + ".recID";
//                    Object nextNumber = NumericSeries.getNextNumber(getTC(), seriename);
//                    rec.getSimpleField(f_recID).setValue(nextNumber);
//                }
//            }
//        } catch (SQLException ex) {
//            ReliefLogger.severe("CHYBA: " + ex.getMessage());
//        } finally {
//            try {
//                if (rs != null) rs.close();
//                if (stmt != null) stmt.close();
//                if (conn != null) conn.close();
//            } catch(SQLException ex) {
//                ReliefLogger.severe("CHYBA PRI ZAVIRANI SPOJENI S DB: " + ex.getMessage());
//            } 
//        }
        return rec;
    }

}
