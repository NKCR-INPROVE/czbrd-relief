/* *****************************************************************************
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package cz.incad.czbrd.common;

import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.Serializable;
import java.math.BigDecimal;
import java.net.HttpURLConnection;
import java.net.URL;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import org.w3c.dom.Document;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.xml.sax.SAXException;

/**
 *******************************************************************************
 *
 * @author Marek
 */
public class ZiskejStream implements Serializable {

    private static final Logger LOG = Logger.getLogger(ZiskejStream.class.getName());

    /**
     ***************************************************************************
     * soukromý defaultní konstruktor
     */
    public ZiskejStream() {
    }

    /**
     * povolení vlastníci záznamů jsou ABA001, BOA001 a OLA001
     */


    /**
     * vrátí stream z definovaného linku
     * @param link (String) - link pro otevření spojení
     * @return
     * @throws IOException 
     */
    private InputStream openConnection(String link) throws IOException {
        if (!"http".equals(link.substring(0, 4))) link = "http://" + link;
        URL url = new URL(link);
        if (LOG.isLoggable(Level.FINE)) {
            LOG.log(Level.FINE, url.toExternalForm());
        }
        HttpURLConnection huc = (HttpURLConnection) url.openConnection();
        huc.setConnectTimeout(60 * 1000);
        huc.setReadTimeout(60 * 1000);
        huc.connect();
        return huc.getInputStream();        
    }
    
    private InputStream openConnectionFile(String fileName) throws IOException {
        if (!Utils.jePrazdne(fileName)) {
            File soubor = new File(fileName);
            InputStream fileInputStream = new FileInputStream(soubor);
            return fileInputStream;
        } else {
            return null;
        }
    }
    
    public OneRecord getFirstStream(String link) {
        OneRecord oneRecord = new OneRecord();
        InputStream streamLocal = null;
        DocumentBuilderFactory dbFactoryLocal = null;
        DocumentBuilder dBuilderLocal = null;
        Document docLocal = null;
        try {
            int pocetOpakovani = 0;
            Boolean opakuj = true;
            while ((opakuj) && (pocetOpakovani<5) ) {
                try {
                    System.out.println("zkousim nacist data - pokus c: " + pocetOpakovani);
                    if ("http".equals(link.substring(0, 4))) {
                        streamLocal = this.openConnection(link);
                    } else {
                        streamLocal = this.openConnectionFile(link);                    
                    }
                    dbFactoryLocal = DocumentBuilderFactory.newInstance();
                    dBuilderLocal = dbFactoryLocal.newDocumentBuilder();
                    docLocal = dBuilderLocal.parse(streamLocal);
                    opakuj = false;
                } catch (IOException ex) {
                    System.out.println(" chyba io: " + ex.getMessage());
                } catch (ParserConfigurationException ex) {
                    System.out.println(" chyba parsovani: " + ex.getMessage());
                    opakuj = false;
                } catch (SAXException ex) {
                    System.out.println(" chyba sax: " + ex.getMessage());            
                    opakuj = false;
                }
                pocetOpakovani++;
            }
            
            //nutno upravit dle skutečnosti
            if (docLocal!=null) {
                String setNumber = "";
                String numberRecord = "";
                String numberEntries = "";
                NodeList nListIdentifiers = docLocal.getElementsByTagName("find");
                for (int i=0; i<nListIdentifiers.getLength(); i++) {
                    Node nChildAttrigute = nListIdentifiers.item(i);
                    if ("set_number".equals(nChildAttrigute.getNodeName())) {
                        setNumber = Utils.vratString(nChildAttrigute);
                    } else if ("no_records".equals(nChildAttrigute.getNodeName())) {
                        numberRecord = Utils.vratString(nChildAttrigute);
                    } else if ("no_entries".equals(nChildAttrigute.getNodeName())) {
                        numberEntries = Utils.vratString(nChildAttrigute);
                    }
                }
                if (!"".equals(link)) {
                    String source = link.substring(link.indexOf("&base="));
                    if (source.indexOf("&")>0) { source = source.substring(0, source.indexOf("&") - 1); }
                    String linkStart = link.substring(0, link.indexOf("?"));
                    String linkNew = "";
                    if (numberEntries.equals(numberRecord)) {
                        linkNew = linkStart + "?op=present&set_no=" + setNumber+ "&set_entry=" + numberEntries + "&base=nkc";
                    } else {
                        linkNew = linkStart + "?op=present&set_no=" + setNumber+ "&set_entry=" + numberEntries + "," + numberRecord + "&base=nkc";
                    }
                    return getStream(link);
                }
            }
        } catch (Exception ex) {
            LOG.log(Level.SEVERE, "Chyba při zpracování streamu: " + ex.getMessage());
        }
        return null;
    }

    public OneRecord getStream(String link) {
        OneRecord oneRecord = new OneRecord();
        InputStream streamLocal = null;
        DocumentBuilderFactory dbFactoryLocal = null;
        DocumentBuilder dBuilderLocal = null;
        Document docLocal = null;
        try {
            int pocetOpakovani = 0;
            Boolean opakuj = true;
            while ((opakuj) && (pocetOpakovani<5) ) {
                try {
                    System.out.println("zkousim nacist data - pokus c: " + pocetOpakovani);
                    if ("http".equals(link.substring(0, 4))) {
                        streamLocal = this.openConnection(link);
                    } else {
                        streamLocal = this.openConnectionFile(link);                    
                    }
                    dbFactoryLocal = DocumentBuilderFactory.newInstance();
                    dBuilderLocal = dbFactoryLocal.newDocumentBuilder();
                    docLocal = dBuilderLocal.parse(streamLocal);
                    opakuj = false;
                } catch (IOException ex) {
                    System.out.println(" chyba io: " + ex.getMessage());
                } catch (ParserConfigurationException ex) {
                    System.out.println(" chyba parsovani: " + ex.getMessage());
                    opakuj = false;
                } catch (SAXException ex) {
                    System.out.println(" chyba sax: " + ex.getMessage());            
                    opakuj = false;
                }
                pocetOpakovani++;
            }
            
            //nutno upravit dle skutečnosti
            if (docLocal!=null) {
                NodeList nListIdentifiers = docLocal.getElementsByTagName("record");
                oneRecord.fill(nListIdentifiers.item(0));
            }
        } catch (Exception ex) {
            LOG.log(Level.SEVERE, "Chyba při zpracování streamu: " + ex.getMessage());
        }
        return oneRecord;
    }
}
