package cz.incad.czbrd.bf;

import com.amaio.plaant.DbBrowser;
import com.amaio.plaant.businessFunctions.AddException;
import com.amaio.plaant.businessFunctions.AnnotationKeys;
import com.amaio.plaant.businessFunctions.ApplicationErrorException;
import com.amaio.plaant.businessFunctions.RecordsIterator;
import com.amaio.plaant.businessFunctions.ValidationException;
import com.amaio.plaant.businessFunctions.WizardException;
import com.amaio.plaant.businessFunctions.WizardMessage;
import com.amaio.plaant.dbdef.ListSource;
import com.amaio.plaant.dbdef.ListSourceItem;
import com.amaio.plaant.dbdef.ListValue;
import com.amaio.plaant.desk.QueryException;
import com.amaio.plaant.metadata.Filter;
import com.amaio.plaant.sync.Domain;
import com.amaio.plaant.sync.Record;
import cz.incad.czbrd.common.ReliefUser;
import cz.incad.r3tools.R3Commons;
import cz.incad.r3tools.R3FilterTools;
import cz.incad.relief3.core.BussinesFunction_A;
import cz.incad.relief3.core.tools.Exceptions;
import cz.incad.relief3.core.tools.ReliefLogger;
import java.rmi.RemoteException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.xml.parsers.ParserConfigurationException;
import org.xml.sax.SAXException;
import radozah.RadoZah;


/**
 *
 * @author AdamFoglar
 */
public class LoadExemplarAleph extends BussinesFunction_A{
    
    
    private DbBrowser dbb;
//    Boolean passed = false;
    
    String tempstr;
    int tempCounter = 0;
//    List<String> tempcollector = Collections.synchronizedList(new ArrayList());
    List<String> templist = Collections.synchronizedList(new ArrayList());
    
    
    
    /***************************************************************************
     * 
     * @return
     * @throws ValidationException
     * @throws WizardException
     */
    public WizardMessage startWizard() throws ValidationException, WizardException {
        WizardMessage wm = new WizardMessage();
        ReliefUser ru = new ReliefUser(getWCC());
        if (!ru.isSystemAdmin()) {
            throw new WizardException("Váš uživatelský účet nemá oprávnění pro spuštění této funkce.");
        }
        return wm;
    }

    /***************************************************************************
     *
     * @param String panelName
     * @return
     * @throws ValidationException
     */
    public WizardMessage panelLeave(String panelName) throws ValidationException {
        ValidationException vex = Exceptions.getValidationException(getWCC());
        WizardMessage wm = new WizardMessage(); 

        //Panel01
        if ("Panel01".equals(panelName)) {            
            String RB_Status = (String) getWCC().getWizardRecord().getSimpleField("RB_GROUP_I").getValue();
            try{
                if(RB_Status.equals("rb_bc")){
                    operator("bc");                
                }else if(RB_Status.equals("rb_id")){
                    operator("id");     
                }else if(RB_Status.equals("rb_sg")){
                    operator("sg");     
                }else if(RB_Status.equals("rb_cnb")){
                    operator("cnb");     
                }
            }catch(ParserConfigurationException e){
                Logger.getLogger(LoadExemplarAleph.class.getName()).log(Level.SEVERE, null, e);
            }catch(SAXException ex){
                Logger.getLogger(LoadExemplarAleph.class.getName()).log(Level.SEVERE, null, ex);
            }catch(RemoteException re){
                Logger.getLogger(LoadExemplarAleph.class.getName()).log(Level.SEVERE, null, re);
            }catch(QueryException qe){
                Logger.getLogger(LoadExemplarAleph.class.getName()).log(Level.SEVERE, null, qe);
            }catch(NullPointerException npe){
                vex.addField("Hledaný parametr", "Nezvolili jste žádný parametr pro hledání", false);
                throw vex;
            }
            
        }

        //Panel02
        if ("Panel02".equals(panelName)) {
            ReliefLogger.severe("panelLeave - Panel 02");
            String exemplar_path = "cz.incad.czbrd.Exemplar";            
            String str_bibCNB = "bibCNB";
            String str_bibPole001 = "bibPole001";
            String str_bibSysno = "bibSysno";
            String str_bibSignatura = "bibSignatura";
            String str_bibCarKod = "bibCarKod";
            String str_bibNazev = "bibNazev";
            String str_bibAutor = "bibAutor";
            String str_bibMistoVydani = "bibMistoVydani";
            String str_bibRokVydani = "bibRokVydani";
            Record recFile;
            
            Domain domain = R3Commons.getDomain(getWCC(), exemplar_path);
            String[] list_sa = templist.toArray(new String[templist.size()]);                    
            Object ot = getWCC().getWizardRecord().getSimpleField("SLPlainList_rep").getValue();
            templist.clear(); 
            
                if(ot != null){
                    try {
                        int it = Integer.parseInt(ot.toString());
                        String[] sa = list_sa[it].toString().split(",");
                        recFile = getWCC().create(domain);
                        getWCC().addRootDomain(domain);
                        recFile.getSimpleField(str_bibNazev).setValue(sa[0].trim());
                        recFile.getSimpleField(str_bibAutor).setValue(sa[1].concat(", ").concat(sa[2]).trim());
                        recFile.getSimpleField(str_bibMistoVydani).setValue(sa[3].trim());
                        recFile.getSimpleField(str_bibRokVydani).setValue(sa[4].trim());
                        recFile.getSimpleField(str_bibCarKod).setValue(sa[5].trim());
                        recFile.getSimpleField(str_bibPole001).setValue(sa[6].trim());
                        recFile.getSimpleField(str_bibCNB).setValue(sa[7].trim());
                        recFile.getSimpleField(str_bibSignatura).setValue(sa[8].trim());
                        recFile.getSimpleField(str_bibSysno).setValue(sa[9].trim());
                        getWCC().commit();
                    } catch (AddException ae) {
                        Logger.getLogger(LoadExemplarAleph.class.getName()).log(Level.SEVERE, null, ae);
                    } catch (ApplicationErrorException aee) {
                        Logger.getLogger(LoadExemplarAleph.class.getName()).log(Level.SEVERE, null, aee);
                    } catch (WizardException we){
                        Logger.getLogger(LoadExemplarAleph.class.getName()).log(Level.SEVERE, null, we);
                    }
                }else{
                    wm.addLine("Nebyl založen žádný záznam, jelikož nebyl žádný vybrán.");
                    return wm;
                }
        }        
        return wm;
    }

    /***************************************************************************
     * 
     * @return
     * @throws ValidationException
     * @throws WizardException
     * @throws ApplicationErrorException
     */
    public WizardMessage runBusinessMethod() throws ValidationException, WizardException, ApplicationErrorException {
        WizardMessage wm = new WizardMessage();
        ReliefLogger.severe("runBusinessMethod");
        return wm;
    }
    
    /*********************************************************************************************************************
     * 
     * @param reqtype
     * @throws ParserConfigurationException
     * @throws SAXException
     * @throws RemoteException
     * @throws QueryException
     * @throws ValidationException 
     */
    public void operator(String reqtype) throws ParserConfigurationException, SAXException, RemoteException, QueryException, ValidationException{
        ValidationException vex = Exceptions.getValidationException(getWCC());
        String adress = "http://aleph.nkp.cz/aleph-cgi";
        RadoZah radozah = new RadoZah(adress);
        
        try{
            String str_request = (String) getWCC().getWizardRecord().getSimpleField("str_request").getValue();
            if(str_request == null){
                vex.addField("Identifikátor", "Nezvolili jste žádný identifikátor podle kterého by proběhlo hledání", true);
                throw vex;
            }
            String str_returned = radozah.get_doc_parsed(reqtype, str_request, null);
            String[] sa_returned = str_returned.split("\u0000");
            getWCC().getWizardRecord().getField("SLPlainList_rep").setAnnotation(AnnotationKeys.LIST_SOURCE_CUSTOM_PROPERTY, new Test());
            
            for(int z=0; sa_returned.length>z;z++){
                String string = sa_returned[z].toString();                        
                String substring = string.substring(1, (string.length()-1));
                tempstr = substring.trim().substring(1);
                if(tempstr.contains("null")||tempstr.length()<=3){
                    
                }else{   
                    ReliefLogger.warning("PRIJATY STRING! = " + tempstr);
                    tempCounter++;
                    templist.add(tempstr);

                    getDBBrowser();
                    filter_tool();  
                }
            }
        }catch(NullPointerException npe){
            Logger.getLogger(LoadExemplarAleph.class.getName()).log(Level.SEVERE, null, npe);
        }    
    }
    
    /******************************************************************************************************
     * Prozkoumani databaze na duplicitu zaznamu
     * 
     * @param 
     * @return void
     * @throws RemoteException
     * @throws QueryException
     * @throws ValidationException
     */
    public void filter_tool() throws RemoteException, QueryException, ValidationException{
        ValidationException vex = Exceptions.getValidationException(getWCC());
        String exemplar_path = "cz.incad.czbrd.Exemplar"; 
        String str_bibCarKod = "bibCarKod";        
        
        Filter filtr;
        filtr = R3FilterTools.getEmptyFilter();
        String[] sa = tempstr.split(",");
        R3FilterTools.addFilterRule(filtr, dbb, exemplar_path, Filter.AND_OP, 1, str_bibCarKod, Filter.EQUAL_CRIT, sa[5].trim(), 1, false);
        RecordsIterator recRit = R3FilterTools.getRecords(getWCC(), exemplar_path, filtr, null);
        if(recRit.getRecordsCount()!= 0){
            vex.addField("Request", "zvolený identifikátor je už v databázi: " + sa[5].trim(), false);
            throw vex;
        }else{
            ReliefLogger.warning("Nebyl nalezen duplicitni zaznam a proto pokracuji v praci");
        }
    }
    
    /***************************************************************
     * Ziskani DBBrowseru i se zachycenym problemem
     * 
     * @param 
     * @return void
     */
    private void getDBBrowser(){
        boolean DBBCheck = false;
        while(!DBBCheck){
            try{
                dbb = R3Commons.getDbBrowser();
                DBBCheck = true;
            }catch(Exception e){
                DBBCheck = false;
            }            
        }             
    }

    
    /*******************************************************************************
     * Test je metoda vytvorena specificky za ucelem vytvoreni noveho listu pro radiobutton
     * Obsahuje pouze 1 metodu - getList(String listId)
     */
    public class Test implements ListSource {
        /*************************************************************************** 
         * @param listId
         * @return ListSourceItem[] newList
         */      
        public ListSourceItem[] getList(String listId) {            
            try{
                int antiCounter = 0;            
                ListSourceItem newList[] = new ListSourceItem[tempCounter];
                
                while(tempCounter>antiCounter){                     
                    newList[antiCounter] = new ListValue("Záznam " + (antiCounter + 1) + " = " + templist.get(antiCounter).toString(), ""+antiCounter);                   
//                    String adder = "Záznam " + (antiCounter + 1) + " = " + templist.get(antiCounter).toString();
//                    tempcollector.add(adder);
                    antiCounter++;
                }                
                return newList;                
            }catch(NullPointerException npe){
                Logger.getLogger(LoadExemplarAleph.class.getName()).log(Level.SEVERE, null, npe);
            }
            return null;
        }
    }
}