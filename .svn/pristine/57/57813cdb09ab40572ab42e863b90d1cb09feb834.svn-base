package cz.incad.czbrd.bf;

import cz.incad.czbrd.ExemplarEntity;
import cz.incad.czbrd.common.ReliefUser;
import com.amaio.plaant.businessFunctions.*;
import com.amaio.plaant.sync.Field;
import com.amaio.plaant.sync.Record;
import cz.incad.czbrd.common.Utils;
import cz.incad.relief3.core.BussinesFunction_A;
import cz.incad.relief3.core.Record_A;
import cz.incad.relief3.core.tools.Commons;
import cz.incad.relief3.core.tools.Exceptions;
import java.io.Serializable;
import java.util.LinkedList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.rmi.CORBA.Util;

import cz.incad.czbrd.common.OneRecord;
import cz.incad.czbrd.common.ZiskejStream;

/*
import com.amaio.plaant.DbBrowser;
import com.amaio.plaant.businessFunctions.AddException;
import com.amaio.plaant.businessFunctions.AnnotationKeys;
import com.amaio.plaant.businessFunctions.ApplicationErrorException;
import com.amaio.plaant.businessFunctions.RecordsIterator;
import com.amaio.plaant.businessFunctions.ValidationException;
import com.amaio.plaant.businessFunctions.WizardException;
import com.amaio.plaant.businessFunctions.WizardMessage;
import com.amaio.plaant.dbdef.ListSource;
import com.amaio.plaant.dbdef.ListSourceItem;
import com.amaio.plaant.dbdef.ListValue;
import com.amaio.plaant.desk.QueryException;
import com.amaio.plaant.metadata.Filter;
import com.amaio.plaant.sync.Domain;
import com.amaio.plaant.sync.Record;
import cz.incad.czbrd.ExemplarEntity;
import cz.incad.czbrd.common.ReliefUser;
//import cz.incad.r3tools.R3Commons;
//import cz.incad.r3tools.R3FilterTools;
import cz.incad.relief3.core.BussinesFunction_A;
import cz.incad.relief3.core.tools.Exceptions;
import java.io.Serializable;
import java.rmi.RemoteException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.xml.parsers.ParserConfigurationException;
import org.xml.sax.SAXException;
//import radozah.RadoZah;
*/

/**
 *
 * @author AdamFoglar
 */
public class LoadExemplarAleph extends BussinesFunction_A implements Serializable {//extends BussinesFunction_A{
    private static final Logger LOG = Logger.getLogger(ExemplarEntity.class.getName());
    private Record rec;
    private Record recForm;
    private String organizationStr;
    private String ccnbStr;
    private String carKodStr;
    private String pole001Str;
    private String nazevStr;
    private String vydavatelStr;
    private String rokVydaniStr;
    private String linkStart = "";
    private String base = "";
    private String ccnbStrNew;
    private String carKodNewStr;
    private String pole001NewStr;
    private String nazevNewStr;
    private String rokVydaniNewStr;
    
    private String autorNewStr;
    private String mistoVydaniNewStr;
    private String signaturaNewStr;
    private String vydavatelNewStr;

    OneRecord oneRecord = new OneRecord();
    
    public WizardMessage startWizard() throws ValidationException, WizardException {
        WizardMessage wm = new WizardMessage();
        ReliefUser ru;
        String organizationUser;
        
        if (getWCC().getSelectedRecords().getRecordsCount() != 1) {
            throw new WizardException("Pro tuto funkci musí být vybrán právě jeden záznam.");
        }
        rec = getWCC().getSelectedRecords().nextRecord();
        ru = new ReliefUser(getWCC());

        organizationUser = ru.getOrganization();
        organizationStr = (String) rec.getSimpleField(ExemplarEntity.F_cOrganization_STR).getValue();

        if (organizationUser == null) {
            throw new WizardException("Váš uživatelský účet nemá nemá přiřazenu organizaci, kontaktujte vašeho administrátora.");
        }

        if (organizationStr == null) {
            throw new WizardException("Vybraný záznam nemá přiřazenu organizaci, kontaktujte vašeho administrátora.");
        }

        if (!(ru.isExplorer() || ru.isSystemAdmin())) {
            throw new WizardException("Pro tuto akci nemáte dostatečná oprávnění.");
        }

        if (!organizationUser.equalsIgnoreCase(organizationStr)) {
            throw new WizardException("Vybraný záznam patří jiné organizaci, nemáte oprávnění jej editovat.");
        }

        if (rec.getSimpleField(ExemplarEntity.F_bibCNB_STR).getValue() == null) {
            ccnbStr = null;
        } else {
            ccnbStr = rec.getSimpleField(ExemplarEntity.F_bibCNB_STR).getValue().toString();
        }
        if (rec.getSimpleField(ExemplarEntity.F_bibCarKod_STR).getValue() == null) {
            carKodStr = null;
        } else {
            carKodStr = rec.getSimpleField(ExemplarEntity.F_bibCarKod_STR).getValue().toString();
        }
        if (rec.getSimpleField(ExemplarEntity.F_bibPole001_STR).getValue() == null) {
            pole001Str = null;
        } else {
            pole001Str = rec.getSimpleField(ExemplarEntity.F_bibPole001_STR).getValue().toString();
        }
        if (rec.getSimpleField(ExemplarEntity.F_bibNazev_STR).getValue() == null) {
            nazevStr = null;
        } else {
            nazevStr = rec.getSimpleField(ExemplarEntity.F_bibNazev_STR).getValue().toString();
        }

        if (rec.getSimpleField(ExemplarEntity.F_bibVydavatel_STR).getValue() == null) {
            vydavatelStr = null;
        } else {
            vydavatelStr = rec.getSimpleField(ExemplarEntity.F_bibVydavatel_STR).getValue().toString();
        }
        if (rec.getSimpleField(ExemplarEntity.F_bibRokVydani_STR).getValue() == null) {
            rokVydaniStr = null;
        } else {
            rokVydaniStr = rec.getSimpleField(ExemplarEntity.F_bibRokVydani_STR).getValue().toString();
        }
        
        LOG.log(Level.SEVERE, "ccnb: " + ccnbStr);
        LOG.log(Level.SEVERE, "ck: " + carKodStr);

        if (Utils.jePrazdne(ccnbStr)) {
            LOG.log(Level.SEVERE, "ccnb je prazdne");
        }
        if ((Utils.jePrazdne(carKodStr))) {
            LOG.log(Level.SEVERE, "ck je prazdne");
        }
        
        if (Utils.jePrazdne(ccnbStr) && (Utils.jePrazdne(carKodStr))) {
            throw new WizardException("Vybraný záznam nemá vyplněn čCNB ani čarový kód. Proto nelze automaticky aktualizovat.");
        }
        
        if (Utils.jePrazdne(organizationStr)) {
            throw new WizardException("Není vyplněn vlastník, nelze pokračovat.");
        }
        
        recForm = getWCC().getWizardRecord();
        if (!Utils.jePrazdne(ccnbStr)) { recForm.getSimpleField("ccnb").setValue(ccnbStr); }
        recForm.getSimpleField("cnb").setAnnotation(AnnotationKeys.READ_ONLY_SECURITY_PROPERTY, AnnotationKeys.TRUE_VALUE);
        if (!Utils.jePrazdne(carKodStr)) { recForm.getSimpleField("carKod").setValue(carKodStr); }
        recForm.getSimpleField("carKod").setAnnotation(AnnotationKeys.READ_ONLY_SECURITY_PROPERTY, AnnotationKeys.TRUE_VALUE);
        if (!Utils.jePrazdne(carKodStr)) { recForm.getSimpleField("pole001").setValue(pole001Str); }
        recForm.getSimpleField("pole001").setAnnotation(AnnotationKeys.READ_ONLY_SECURITY_PROPERTY, AnnotationKeys.TRUE_VALUE);
        if (!Utils.jePrazdne(nazevStr)) { recForm.getSimpleField("nazev").setValue(nazevStr); }
        recForm.getSimpleField("nazev").setAnnotation(AnnotationKeys.READ_ONLY_SECURITY_PROPERTY, AnnotationKeys.TRUE_VALUE);
        if (!Utils.jePrazdne(rokVydaniStr)) { recForm.getSimpleField("rokVydani").setValue(rokVydaniStr); }
        recForm.getSimpleField("rokVydani").setAnnotation(AnnotationKeys.READ_ONLY_SECURITY_PROPERTY, AnnotationKeys.TRUE_VALUE);

        if (!Utils.jePrazdne(organizationStr)) {
            if ("ABA001".equals(organizationStr)) {
                linkStart = "http://aleph.nkp.cz/X";
                base = "nkc";
            } else if ("BOA001".equals(organizationStr)) {
                linkStart = "http://aleph.mzk.cz/X";
                base = "";
            } else if ("OLA001".equals(organizationStr)) {
                linkStart = "http://aleph.XXXXX.cz/X";                
                base = "";
            }
            
            ZiskejStream ziskejStream = new ZiskejStream();
            oneRecord = ziskejStream.getStream(linkStart, base, ccnbStr, carKodStr);
            if (oneRecord == null) {
                throw new WizardException("Záznam nebyl v Alephu nalezen, nelze pokračovat.");
            }
            //wm.addLine(oneRecord.toString());

            try {
                pole001NewStr = oneRecord.getPole001();
            } catch (NullPointerException e) {
                pole001NewStr = null;
            }
            try {
                ccnbStrNew = oneRecord.getPole015().get("a");
            } catch (NullPointerException e) {
                ccnbStrNew = null;
            }
            //carKodStrNew;
            try {
                nazevNewStr = oneRecord.getPole245().get("a");
            } catch (NullPointerException e) {
                nazevNewStr = null;
            }
            try {
                String podNazev = "";
                podNazev = oneRecord.getPole245().get("b");
                nazevNewStr = nazevNewStr + " " + podNazev;
            } catch (NullPointerException e) { }
            try {
                rokVydaniNewStr = oneRecord.getPole260().get("c");
            } catch (NullPointerException e) {
                rokVydaniNewStr = null;
            }

            if (!Utils.jePrazdne(ccnbStrNew)) { recForm.getSimpleField("ccnbNew").setValue(ccnbStrNew); }
            recForm.getSimpleField("cnbNew").setAnnotation(AnnotationKeys.READ_ONLY_SECURITY_PROPERTY, AnnotationKeys.TRUE_VALUE);
            //if (!Utils.jePrazdne(carKodStrNew)) { recForm.getSimpleField("carKodNew").setValue(carKodStrNew); }
            //recForm.getSimpleField("carKodNew").setAnnotation(AnnotationKeys.READ_ONLY_SECURITY_PROPERTY, AnnotationKeys.TRUE_VALUE);
            if (!Utils.jePrazdne(pole001NewStr)) { recForm.getSimpleField("pole001New").setValue(pole001NewStr); }
            recForm.getSimpleField("pole001New").setAnnotation(AnnotationKeys.READ_ONLY_SECURITY_PROPERTY, AnnotationKeys.TRUE_VALUE);
            if (!Utils.jePrazdne(nazevNewStr)) { recForm.getSimpleField("nazevNew").setValue(nazevNewStr); }
            recForm.getSimpleField("nazevNew").setAnnotation(AnnotationKeys.READ_ONLY_SECURITY_PROPERTY, AnnotationKeys.TRUE_VALUE);
            if (!Utils.jePrazdne(rokVydaniNewStr)) { recForm.getSimpleField("rokVydaniNew").setValue(rokVydaniNewStr); }
            recForm.getSimpleField("rokVydaniNew").setAnnotation(AnnotationKeys.READ_ONLY_SECURITY_PROPERTY, AnnotationKeys.TRUE_VALUE);
        }

        return wm;
     }

    public WizardMessage panelLeave(String panelName) throws ValidationException, WizardException {
        WizardMessage wm = new WizardMessage();

        if ("Panel01".equals(panelName)) {
            if ((Boolean) recForm.getFieldValue("zmenit") != true) {
                throw new WizardException("Nebylo zaškrtnuto pole 'Upravit záznam...'.");
            }

            try {
                autorNewStr = oneRecord.getPole100().get("a");
            } catch (NullPointerException e) {
                autorNewStr = null;
            }
            try {
                mistoVydaniNewStr = oneRecord.getPole260().get("a") + oneRecord.getPole260().get("b");
            } catch (NullPointerException e) {
                mistoVydaniNewStr = null;
            }
            try {
                vydavatelNewStr = oneRecord.getPole260().get("b");
            } catch (NullPointerException e) {
                vydavatelNewStr = null;
            }

            recForm = getWCC().getWizardRecord();
            if (!Utils.jePrazdne(ccnbStrNew)) { recForm.getSimpleField("ccnbNew").setValue(ccnbStrNew); }
            recForm.getSimpleField("cnbNew").setAnnotation(AnnotationKeys.READ_ONLY_SECURITY_PROPERTY, AnnotationKeys.TRUE_VALUE);
            //if (!Utils.jePrazdne(carKodStrNew)) { recForm.getSimpleField("carKodNew").setValue(carKodStrNew); }
            //recForm.getSimpleField("carKodNew").setAnnotation(AnnotationKeys.READ_ONLY_SECURITY_PROPERTY, AnnotationKeys.TRUE_VALUE);
            if (!Utils.jePrazdne(pole001NewStr)) { recForm.getSimpleField("pole001New").setValue(pole001NewStr); }
            recForm.getSimpleField("pole001New").setAnnotation(AnnotationKeys.READ_ONLY_SECURITY_PROPERTY, AnnotationKeys.TRUE_VALUE);

            if (!Utils.jePrazdne(nazevNewStr)) { recForm.getSimpleField("nazevNew").setValue(nazevNewStr); }
            recForm.getSimpleField("nazevNew").setAnnotation(AnnotationKeys.READ_ONLY_SECURITY_PROPERTY, AnnotationKeys.TRUE_VALUE);
            if (!Utils.jePrazdne(rokVydaniNewStr)) { recForm.getSimpleField("rokVydaniNew").setValue(rokVydaniNewStr); }
            recForm.getSimpleField("rokVydaniNew").setAnnotation(AnnotationKeys.READ_ONLY_SECURITY_PROPERTY, AnnotationKeys.TRUE_VALUE);

            if (!Utils.jePrazdne(autorNewStr)) { recForm.getSimpleField("autorNew").setValue(autorNewStr); }
            recForm.getSimpleField("autorNew").setAnnotation(AnnotationKeys.READ_ONLY_SECURITY_PROPERTY, AnnotationKeys.TRUE_VALUE);
            if (!Utils.jePrazdne(mistoVydaniNewStr)) { recForm.getSimpleField("mistoVydaniNew").setValue(mistoVydaniNewStr); }
            recForm.getSimpleField("mistoVydaniNew").setAnnotation(AnnotationKeys.READ_ONLY_SECURITY_PROPERTY, AnnotationKeys.TRUE_VALUE);
            if (!Utils.jePrazdne(vydavatelNewStr)) { recForm.getSimpleField("vydavatelNew").setValue(vydavatelNewStr); }
            recForm.getSimpleField("vydavatelNew").setAnnotation(AnnotationKeys.READ_ONLY_SECURITY_PROPERTY, AnnotationKeys.TRUE_VALUE);
            
        } else if ("Panel02".equals(panelName)) {
            if ((Boolean) recForm.getFieldValue("potvrdit") != true) {
                throw new WizardException("Nebylo zaškrtnuto pole 'Potvrdit změny...'.");
            }
        }
        return wm;
    }

    public WizardMessage runBusinessMethod() throws ValidationException, WizardException, ApplicationErrorException {
        WizardMessage wm = new WizardMessage();


        return wm;
    }
    
//    private DbBrowser dbb;
////    Boolean passed = false;
//    
//    String tempstr;
//    int tempCounter = 0;
////    List<String> tempcollector = Collections.synchronizedList(new ArrayList());
//    List<String> templist = Collections.synchronizedList(new ArrayList());
//    
//    
//    
//    /***************************************************************************
//     * 
//     * @return
//     * @throws ValidationException
//     * @throws WizardException
//     */
//    public WizardMessage startWizard() throws ValidationException, WizardException {
//        WizardMessage wm = new WizardMessage();
//        ReliefUser ru = new ReliefUser(getWCC());
//        if (!ru.isSystemAdmin()) {
//            throw new WizardException("Váš uživatelský účet nemá oprávnění pro spuštění této funkce.");
//        }
//        return wm;
//    }
//
//    /***************************************************************************
//     *
//     * @param String panelName
//     * @return
//     * @throws ValidationException
//     */
//    public WizardMessage panelLeave(String panelName) throws ValidationException {
//        ValidationException vex = Exceptions.getValidationException(getWCC());
//        WizardMessage wm = new WizardMessage(); 
//
//        //Panel01
//        if ("Panel01".equals(panelName)) {            
//            String RB_Status = (String) getWCC().getWizardRecord().getSimpleField("RB_GROUP_I").getValue();
//            try{
//                if(RB_Status.equals("rb_bc")){
//                    operator("bc");                
//                }else if(RB_Status.equals("rb_id")){
//                    operator("id");     
//                }else if(RB_Status.equals("rb_sg")){
//                    operator("sg");     
//                }else if(RB_Status.equals("rb_cnb")){
//                    operator("cnb");     
//                }
//            }catch(ParserConfigurationException e){
//                Logger.getLogger(LoadExemplarAleph.class.getName()).log(Level.SEVERE, null, e);
//            }catch(SAXException ex){
//                Logger.getLogger(LoadExemplarAleph.class.getName()).log(Level.SEVERE, null, ex);
//            }catch(RemoteException re){
//                Logger.getLogger(LoadExemplarAleph.class.getName()).log(Level.SEVERE, null, re);
//            }catch(QueryException qe){
//                Logger.getLogger(LoadExemplarAleph.class.getName()).log(Level.SEVERE, null, qe);
//            }catch(NullPointerException npe){
//                vex.addField("Hledaný parametr", "Nezvolili jste žádný parametr pro hledání", false);
//                throw vex;
//            }
//            
//        }
//
//        //Panel02
//        if ("Panel02".equals(panelName)) {
//            ReliefLogger.severe("panelLeave - Panel 02");
//            String exemplar_path = "cz.incad.czbrd.Exemplar";            
//            String str_bibCNB = "bibCNB";
//            String str_bibPole001 = "bibPole001";
//            String str_bibSysno = "bibSysno";
//            String str_bibSignatura = "bibSignatura";
//            String str_bibCarKod = "bibCarKod";
//            String str_bibNazev = "bibNazev";
//            String str_bibAutor = "bibAutor";
//            String str_bibMistoVydani = "bibMistoVydani";
//            String str_bibRokVydani = "bibRokVydani";
//            Record recFile;
//            
//            Domain domain = R3Commons.getDomain(getWCC(), exemplar_path);
//            String[] list_sa = templist.toArray(new String[templist.size()]);                    
//            Object ot = getWCC().getWizardRecord().getSimpleField("SLPlainList_rep").getValue();
//            templist.clear(); 
//            
//                if(ot != null){
//                    try {
//                        int it = Integer.parseInt(ot.toString());
//                        String[] sa = list_sa[it].toString().split(",");
//                        recFile = getWCC().create(domain);
//                        getWCC().addRootDomain(domain);
//                        recFile.getSimpleField(str_bibNazev).setValue(sa[0].trim());
//                        recFile.getSimpleField(str_bibAutor).setValue(sa[1].concat(", ").concat(sa[2]).trim());
//                        recFile.getSimpleField(str_bibMistoVydani).setValue(sa[3].trim());
//                        recFile.getSimpleField(str_bibRokVydani).setValue(sa[4].trim());
//                        recFile.getSimpleField(str_bibCarKod).setValue(sa[5].trim());
//                        recFile.getSimpleField(str_bibPole001).setValue(sa[6].trim());
//                        recFile.getSimpleField(str_bibCNB).setValue(sa[7].trim());
//                        recFile.getSimpleField(str_bibSignatura).setValue(sa[8].trim());
//                        recFile.getSimpleField(str_bibSysno).setValue(sa[9].trim());
//                        getWCC().commit();
//                    } catch (AddException ae) {
//                        Logger.getLogger(LoadExemplarAleph.class.getName()).log(Level.SEVERE, null, ae);
//                    } catch (ApplicationErrorException aee) {
//                        Logger.getLogger(LoadExemplarAleph.class.getName()).log(Level.SEVERE, null, aee);
//                    } catch (WizardException we){
//                        Logger.getLogger(LoadExemplarAleph.class.getName()).log(Level.SEVERE, null, we);
//                    }
//                }else{
//                    wm.addLine("Nebyl založen žádný záznam, jelikož nebyl žádný vybrán.");
//                    return wm;
//                }
//        }        
//        return wm;
//    }
//
//    /***************************************************************************
//     * 
//     * @return
//     * @throws ValidationException
//     * @throws WizardException
//     * @throws ApplicationErrorException
//     */
//    public WizardMessage runBusinessMethod() throws ValidationException, WizardException, ApplicationErrorException {
//        WizardMessage wm = new WizardMessage();
//        ReliefLogger.severe("runBusinessMethod");
//        return wm;
//    }
//    
//    /*********************************************************************************************************************
//     * 
//     * @param reqtype
//     * @throws ParserConfigurationException
//     * @throws SAXException
//     * @throws RemoteException
//     * @throws QueryException
//     * @throws ValidationException 
//     */
//    public void operator(String reqtype) throws ParserConfigurationException, SAXException, RemoteException, QueryException, ValidationException{
//        ValidationException vex = Exceptions.getValidationException(getWCC());
//        String adress = "http://aleph.nkp.cz/aleph-cgi";
//        RadoZah radozah = new RadoZah(adress);
//        
//        try{
//            String str_request = (String) getWCC().getWizardRecord().getSimpleField("str_request").getValue();
//            if(str_request == null){
//                vex.addField("Identifikátor", "Nezvolili jste žádný identifikátor podle kterého by proběhlo hledání", true);
//                throw vex;
//            }
//            String str_returned = radozah.get_doc_parsed(reqtype, str_request, null);
//            String[] sa_returned = str_returned.split("\u0000");
//            getWCC().getWizardRecord().getField("SLPlainList_rep").setAnnotation(AnnotationKeys.LIST_SOURCE_CUSTOM_PROPERTY, new Test());
//            
//            for(int z=0; sa_returned.length>z;z++){
//                String string = sa_returned[z].toString();                        
//                String substring = string.substring(1, (string.length()-1));
//                tempstr = substring.trim().substring(1);
//                if(tempstr.contains("null")||tempstr.length()<=3){
//                    
//                }else{   
//                    ReliefLogger.warning("PRIJATY STRING! = " + tempstr);
//                    tempCounter++;
//                    templist.add(tempstr);
//
//                    getDBBrowser();
//                    filter_tool();  
//                }
//            }
//        }catch(NullPointerException npe){
//            Logger.getLogger(LoadExemplarAleph.class.getName()).log(Level.SEVERE, null, npe);
//        }    
//    }
//    
//    /******************************************************************************************************
//     * Prozkoumani databaze na duplicitu zaznamu
//     * 
//     * @param 
//     * @return void
//     * @throws RemoteException
//     * @throws QueryException
//     * @throws ValidationException
//     */
//    public void filter_tool() throws RemoteException, QueryException, ValidationException{
//        ValidationException vex = Exceptions.getValidationException(getWCC());
//        String exemplar_path = "cz.incad.czbrd.Exemplar"; 
//        String str_bibCarKod = "bibCarKod";        
//        
//        Filter filtr;
//        filtr = R3FilterTools.getEmptyFilter();
//        String[] sa = tempstr.split(",");
//        R3FilterTools.addFilterRule(filtr, dbb, exemplar_path, Filter.AND_OP, 1, str_bibCarKod, Filter.EQUAL_CRIT, sa[5].trim(), 1, false);
//        RecordsIterator recRit = R3FilterTools.getRecords(getWCC(), exemplar_path, filtr, null);
//        if(recRit.getRecordsCount()!= 0){
//            vex.addField("Request", "zvolený identifikátor je už v databázi: " + sa[5].trim(), false);
//            throw vex;
//        }else{
//            ReliefLogger.warning("Nebyl nalezen duplicitni zaznam a proto pokracuji v praci");
//        }
//    }
//    
//    /***************************************************************
//     * Ziskani DBBrowseru i se zachycenym problemem
//     * 
//     * @param 
//     * @return void
//     */
//    private void getDBBrowser(){
//        boolean DBBCheck = false;
//        while(!DBBCheck){
//            try{
//                dbb = R3Commons.getDbBrowser();
//                DBBCheck = true;
//            }catch(Exception e){
//                DBBCheck = false;
//            }            
//        }             
//    }
//
//    
//    /*******************************************************************************
//     * Test je metoda vytvorena specificky za ucelem vytvoreni noveho listu pro radiobutton
//     * Obsahuje pouze 1 metodu - getList(String listId)
//     */
//    public class Test implements ListSource {
//        /*************************************************************************** 
//         * @param listId
//         * @return ListSourceItem[] newList
//         */      
//        public ListSourceItem[] getList(String listId) {            
//            try{
//                int antiCounter = 0;            
//                ListSourceItem newList[] = new ListSourceItem[tempCounter];
//                
//                while(tempCounter>antiCounter){                     
//                    newList[antiCounter] = new ListValue("Záznam " + (antiCounter + 1) + " = " + templist.get(antiCounter).toString(), ""+antiCounter);                   
////                    String adder = "Záznam " + (antiCounter + 1) + " = " + templist.get(antiCounter).toString();
////                    tempcollector.add(adder);
//                    antiCounter++;
//                }                
//                return newList;                
//            }catch(NullPointerException npe){
//                Logger.getLogger(LoadExemplarAleph.class.getName()).log(Level.SEVERE, null, npe);
//            }
//            return null;
//        }
//    }

}