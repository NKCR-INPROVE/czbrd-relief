/* *****************************************************************************
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package cz.incad.czbrd.common;

import cz.incad.commontools.utils.StringUtils;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import org.w3c.dom.NamedNodeMap;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

/**
 *******************************************************************************
 *
 * @author Marek
 */
public class OneRecord {
    private static final Logger LOG = Logger.getLogger(OneRecord.class.getName());
    
    private String leader;
    private String pole001;
    private String pole003;
    private String pole005;
    private String pole007;
    private String pole008;
    private List<SubRecord> pole015;
    private List<SubRecord> pole020;
    private List<SubRecord> pole022;
    private SubRecord pole024;
    private SubRecord pole040;
    private SubRecord pole080;
    private SubRecord pole100;
    private List<SubRecord> pole245; //názvy
    private List<SubRecord> pole246; //variantní názvy
    private SubRecord pole250;
    private SubRecord pole260;
    private SubRecord pole264;
    private SubRecord pole300;
    private SubRecord pole490;
    private SubRecord pole500;
    private SubRecord pole653;
    private SubRecord pole790;
    private SubRecord pole830;
    private SubRecord pole856;
    private SubRecord pole901;
    private List<SubRecord> pole902;
    private SubRecord pole910;
    private SubRecord pole911;
    private SubRecord pole964;
    private SubRecord pole998;
    
    public OneRecord() {
        this.leader = "";
        this.pole001 = "";
        this.pole003 = "";
        this.pole005 = "";
        this.pole007 = "";
        this.pole008 = "";
        this.pole015 = new ArrayList<SubRecord>();
        this.pole020 = new ArrayList<SubRecord>();
        this.pole022 = new ArrayList<SubRecord>();
        this.pole024 = new SubRecord();
        this.pole040 = new SubRecord();
        this.pole080 = new SubRecord();
        this.pole100 = new SubRecord();
        this.pole245 = new ArrayList<SubRecord>(); //názvy
        this.pole246 = new ArrayList<SubRecord>(); //variantní názvy
        this.pole250 = new SubRecord();
        this.pole260 = new SubRecord();
        this.pole264 = new SubRecord();
        this.pole300 = new SubRecord();
        this.pole490 = new SubRecord();
        this.pole500 = new SubRecord();
        this.pole653 = new SubRecord();
        this.pole790 = new SubRecord();
        this.pole830 = new SubRecord();
        this.pole856 = new SubRecord();
        this.pole901 = new SubRecord();
        this.pole902 = new ArrayList<SubRecord>();
        this.pole910 = new SubRecord();
        this.pole911 = new SubRecord();
        this.pole964 = new SubRecord();
        this.pole998 = new SubRecord();
        
    }
    
    public void fill(Node vstup) {
        String tag = "";
        NodeList nlChild = vstup.getChildNodes();
        for (int i=0; i<nlChild.getLength(); i++) {
            Node nChild = nlChild.item(i);
            if ("leader".equals(nChild.getNodeName())) {
                this.leader = nChild.getTextContent();
                System.out.println(" leader");
            } else if ("controlfield".equals(nChild.getNodeName())) {
                NamedNodeMap nlAttribute = nChild.getAttributes();
                tag = "";
                for (int j=0; j<nlAttribute.getLength(); j++) {
                    Node nChildAttrigute = nlAttribute.item(j);
                    if ("tag".equals(nChildAttrigute.getNodeName())) {
                        if ("".equals(tag)) tag = Utils.vratString(nChildAttrigute);
                    }
                }
                System.out.println(" controlfield: " + tag);
                if ("001".equals(tag)) {
                    this.pole001 = Utils.vratString(nChild);
                } else if ("003".equals(tag)) {
                    this.pole003 = Utils.vratString(nChild);
                } else if ("005".equals(tag)) {
                    this.pole005 = Utils.vratString(nChild);
                } else if ("007".equals(tag)) {
                    this.pole007 = Utils.vratString(nChild);
                } else if ("008".equals(tag)) {
                    this.pole008 = Utils.vratString(nChild);
                } else {
                    LOG.log(Level.SEVERE, "neznámý parametr: " + tag);
                    //LOG.log(Level.SEVERE, "neznámý parametr: " + tag + " -||- " + Thread.currentThread().getStackTrace()[2].getLineNumber());
                }
            } else if ("datafield".equals(nChild.getNodeName())) {
                NamedNodeMap nlAttribute = nChild.getAttributes();
                tag = "";
                for (int j=0; j<nlAttribute.getLength(); j++) {
                    Node nChildAttrigute = nlAttribute.item(j);
                    if ("tag".equals(nChildAttrigute.getNodeName())) {
                        if ("".equals(tag)) tag = Utils.vratString(nChildAttrigute);
                    }
                }
                SubRecord subRecord = new SubRecord();
                subRecord.fillFromNode(nChild);
                if ("015".equals(tag)) {
                    this.pole015.add(subRecord);
                } else if ("020".equals(tag)) {
                    this.pole020.add(subRecord);
                } else if ("022".equals(tag)) {
                    this.pole022.add(subRecord);
                } else if ("024".equals(tag)) {
                    this.pole024 = subRecord;
                } else if ("040".equals(tag)) {
                    this.pole040 = subRecord;
                } else if ("080".equals(tag)) {
                    this.pole080 = subRecord;
                } else if ("100".equals(tag)) {
                    this.pole100 = subRecord;
                } else if ("245".equals(tag)) {
                    this.pole245.add(subRecord);
                } else if ("246".equals(tag)) {
                    this.pole246.add(subRecord);
                } else if ("250".equals(tag)) {
                    this.pole250 = subRecord;
                } else if ("260".equals(tag)) {
                    this.pole260 = subRecord;
                } else if ("264".equals(tag)) {
                    this.pole264 = subRecord;
                } else if ("300".equals(tag)) {
                    this.pole300 = subRecord;
                } else if ("490".equals(tag)) {
                    this.pole490 = subRecord;
                } else if ("500".equals(tag)) {
                    this.pole500 = subRecord;
                } else if ("653".equals(tag)) {
                    this.pole653 = subRecord;
                } else if ("790".equals(tag)) {
                    this.pole790 = subRecord;
                } else if ("830".equals(tag)) {
                    this.pole830 = subRecord;
                } else if ("856".equals(tag)) {
                    this.pole856 = subRecord;
                } else if ("901".equals(tag)) {
                    this.pole901 = subRecord;
                } else if ("902".equals(tag)) {
                    this.pole902.add(subRecord);
                } else if ("910".equals(tag)) {
                    this.pole910 = subRecord;
                } else if ("911".equals(tag)) {
                    this.pole911 = subRecord;
                } else if ("964".equals(tag)) {
                    this.pole964 = subRecord;
                } else if ("998".equals(tag)) {
                    this.pole998 = subRecord;
                } else {
                    LOG.log(Level.SEVERE, "neznámé pole tag v datafiledu: " + tag);
                }
            }
        }
        
        System.out.println(" zaznam: " + this.toString());
    }
    
    /**
     * pomocný objekt na uložení hodnot
     */
    public class SubRecord {
        private HashMap<String, String> hodnoty;
        
        /**
         * constructor
         */
        public SubRecord() {
            this.hodnoty = new HashMap<String, String>();
        }
        
        /**
         * nastavuje hodnotu dle klíče
         * @param klic
         * @param hodnota 
         */
        public void set(String klic, String hodnota) {
            this.hodnoty.put(klic, hodnota);
        }
        
        /**
         * vrací hodnotu dle klíče
         * @param klic
         * @return 
         */
        public String get(String klic) {
            return this.hodnoty.get(klic);
        }
        
        /**
         * plní hodnoty z node
         * @param vstup (node)
         */
        public void fillFromNode(Node vstup) {
            String code = "";
            NamedNodeMap nlAttribute = vstup.getAttributes();
            for (int l=0; l<nlAttribute.getLength(); l++) {
                Node nChild = nlAttribute.item(l);
                if (!"tag".equals(nChild.getNodeName())) {
                    if (!Utils.jePrazdne(nChild.getNodeValue())) this.set(nChild.getNodeName(), nChild.getNodeValue());
                }
            }
            NodeList nlChild = vstup.getChildNodes();
            for (int l=1; l<nlChild.getLength(); l++) {
                code = "";
                Node nChild = nlChild.item(l);
                if (!"subfield".equals(nChild.getNodeName())) {
                    //System.out.println(" záznam není subfield: " + nChild.toString());
                } else {
                    NamedNodeMap nlChildAttribute = nChild.getAttributes();
                    for (int k=0; k<nlChildAttribute.getLength(); k++) {
                        Node nChildChild = nlChildAttribute.item(k);
                        if ("code".equals(nChildChild.getNodeName())) {
                            code = Utils.vratString(nChildChild);
                        }
                    }
                    if (!"".equals(code)) {
                        if (!Utils.jePrazdne(Utils.vratString(nChild))) this.set(code, Utils.vratString(nChild));

                    }
                }
            }
        }
        
        public String toString() {
            String vysledek = "";
            if (this.hodnoty != null) { vysledek = this.hodnoty.toString(); }
            return vysledek;
        }
        
    }
    
    public String toString() {
        String vysledek = "";
        
        vysledek += Utils.vratStringSOddelovacem("leader", this.leader);
        vysledek += Utils.vratStringSOddelovacem("pole001", this.pole001);
        vysledek += Utils.vratStringSOddelovacem("pole003", this.pole003);
        vysledek += Utils.vratStringSOddelovacem("pole005", this.pole005);
        vysledek += Utils.vratStringSOddelovacem("pole007", this.pole007);
        vysledek += Utils.vratStringSOddelovacem("pole008", this.pole008);
        vysledek += Utils.vratStringSOddelovacemLS("pole015", this.pole015);
        vysledek += Utils.vratStringSOddelovacemLS("pole020", this.pole020);
        vysledek += Utils.vratStringSOddelovacemLS("pole022", this.pole022);
        vysledek += Utils.vratStringSOddelovacem("pole024", this.pole024);
        vysledek += Utils.vratStringSOddelovacem("pole040", this.pole040);
        vysledek += Utils.vratStringSOddelovacem("pole080", this.pole080);
        vysledek += Utils.vratStringSOddelovacem("pole100", this.pole100);
        vysledek += Utils.vratStringSOddelovacemLS("pole245", this.pole245); //názvy
        vysledek += Utils.vratStringSOddelovacemLS("pole246", this.pole246); //variantní názvy
        vysledek += Utils.vratStringSOddelovacem("pole250", this.pole250);
        vysledek += Utils.vratStringSOddelovacem("pole260", this.pole260);
        vysledek += Utils.vratStringSOddelovacem("pole264", this.pole264);
        vysledek += Utils.vratStringSOddelovacem("pole300", this.pole300);
        vysledek += Utils.vratStringSOddelovacem("pole490", this.pole490);
        vysledek += Utils.vratStringSOddelovacem("pole500", this.pole500);
        vysledek += Utils.vratStringSOddelovacem("pole653", this.pole653);
        vysledek += Utils.vratStringSOddelovacem("pole790", this.pole790);
        vysledek += Utils.vratStringSOddelovacem("pole830", this.pole830);
        vysledek += Utils.vratStringSOddelovacem("pole856", this.pole856);
        vysledek += Utils.vratStringSOddelovacem("pole901", this.pole901);
        vysledek += Utils.vratStringSOddelovacemLS("pole902", this.pole902);
        vysledek += Utils.vratStringSOddelovacem("pole910", this.pole910);
        vysledek += Utils.vratStringSOddelovacem("pole911", this.pole911);
        vysledek += Utils.vratStringSOddelovacem("pole964", this.pole964);
        vysledek += Utils.vratStringSOddelovacem("pole998", this.pole998);
        
        return vysledek;
    }
    
}
