/* *****************************************************************************
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package cz.incad.czbrd.common;

import java.io.IOException;
import java.io.InputStream;
import java.io.Serializable;
import java.math.BigDecimal;
import java.net.HttpURLConnection;
import java.net.URL;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import org.w3c.dom.Document;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.xml.sax.SAXException;

/**
 *******************************************************************************
 *
 * @author Martin
 */
public class ZiskejStream implements Serializable {

    private static final Logger LOG = Logger.getLogger(ZiskejStream.class.getName());

    /**
     ***************************************************************************
     * soukromý defaultní konstruktor
     */
    private ZiskejStream() {
    }


    /**
     * vrátí stream z definovaného linku
     * @param link (String) - link pro otevření spojení
     * @return
     * @throws IOException 
     */
    private InputStream openConnection(String link) throws IOException {
        if (!"http".equals(link.substring(0, 4))) link = "http://" + link;
        URL url = new URL(link);
        if (LOG.isLoggable(Level.FINE)) {
            LOG.log(Level.FINE, url.toExternalForm());
        }
        HttpURLConnection huc = (HttpURLConnection) url.openConnection();
        huc.setConnectTimeout(60 * 1000);
        huc.setReadTimeout(60 * 1000);
        huc.connect();
        return huc.getInputStream();        
    }
    
    private void getStream(String link) {
        InputStream streamLocal = null;
        DocumentBuilderFactory dbFactoryLocal = null;
        DocumentBuilder dBuilderLocal = null;
        Document docLocal = null;
        try {
            int pocetOpakovani = 0;
            Boolean opakuj = true;
            while ((opakuj) && (pocetOpakovani<5) ) {
                try {
                    System.out.println("zkousim nacist data - pokus c: " + pocetOpakovani);
                    streamLocal = this.openConnection(link);
                    dbFactoryLocal = DocumentBuilderFactory.newInstance();
                    dBuilderLocal = dbFactoryLocal.newDocumentBuilder();
                    docLocal = dBuilderLocal.parse(streamLocal);
                } catch (IOException ex) {
                    System.out.println(" chyba io: " + ex.getMessage());
                } catch (ParserConfigurationException ex) {
                    System.out.println(" chyba parsovani: " + ex.getMessage());
                    opakuj = false;
                } catch (SAXException ex) {
                    System.out.println(" chyba sax: " + ex.getMessage());            
                    opakuj = false;
                }
                pocetOpakovani++;
            }
            
            //nutno upravit dle skutečnosti
            if (docLocal!=null) {
                NodeList nListIdentifiers = docLocal.getElementsByTagName("record");
                Node nNodeIdentifiers = nListIdentifiers.item(0);
                NodeList nListChild = nNodeIdentifiers.getChildNodes();
                for (int i = 0; i < nListChild.getLength(); i++) {
                    Node nNodeChild = nListChild.item(i);
                    if ("header".equals(nNodeChild.getNodeName())) {
                        NodeList nListHeader = nNodeChild.getChildNodes();
                        for (int j = 0; j < nListHeader.getLength(); j++) { //zpracovani zaznamu 
                            Node nNodeHeader = nListHeader.item(j);
                            if ("identifier".equals(nNodeHeader.getNodeName())) {
                            }
                        }
                    }
                }
            }
        } catch (Exception ex) {
            LOG.log(Level.SEVERE, "Chyba při zpracování streamu: " + ex.getMessage());
        }
    }
}
