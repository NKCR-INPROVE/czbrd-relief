/* *****************************************************************************
 * To change this template, choose Tools | Templates and open the template in
 * the editor.
 */
package cz.incad.czbrd;

import com.amaio.plaant.businessFunctions.AddException;
import com.amaio.plaant.businessFunctions.TriggerContext;
import com.amaio.plaant.businessFunctions.UpdateException;
import com.amaio.plaant.businessFunctions.ValidationException;
import com.amaio.plaant.sync.Record;
import cz.incad.czbrd.common.Utils;
import cz.incad.relief3.core.Record_A;
import cz.incad.relief3.core.tools.Exceptions;
import java.io.Serializable;

/**
 *******************************************************************************
 *
 * @author martin
 */
public class EvidenceMereniPrilohaEntity extends Record_A implements Serializable {

    public static final String f_rPriloha_REF = "rPriloha";

    public static final String f_merZpusob_STR = "merZpusob";
    public static final String f_merKde_STR = "merKde";
    public static final String f_merStrana_STR = "merStrana";
    public static final String f_merPH_STR = "merPH";
    public static final String f_note_STR = "note";

    public static final String f_pMechChybCast_STR = "pMechChybCast";
    public static final String f_pMechPrehPrek_STR = "pMechPrehPrek";
    public static final String f_pMechCinHlodHmyz_STR = "pMechCinHlodHmyz";
    public static final String f_pMechKrehkost_STR = "pMechKrehkost";
    public static final String f_pMechLepPas_STR = "pMechLepPas";
    public static final String f_pMechNeni_STR = "pMechNeni";

    public static final String f_pBioHmyz_STR = "pBioHmyz";
    public static final String f_pBioHlodavci_STR = "pBioHlodavci";
    public static final String f_pBioPlisBak_STR = "pBioPlisBak";
    public static final String f_pBioNeni_STR = "pBioNeni";

    public static final String f_pChemNecTex_STR = "pChemNecTex";
    public static final String f_pChemZdeg_STR = "pChemZdeg";
    public static final String f_pChemMast_STR = "pChemMast";
    public static final String f_pChemNeni_STR = "pChemNeni";
    public static final String f_pChemPrach_STR = "pChemPrach";
    public static final String f_pChemBarSkv_STR = "pChemBarSkv";
    public static final String f_pChemJinTek_STR = "pChemJinTek";
    public static final String f_pChemVoda_STR = "pChemVoda";
    public static final String f_pChemTepPos_STR = "pChemTepPos";

    public static final String f_barevnostL_STR = "barevnostL";
    public static final String f_barevnostA_STR = "barevnostA";
    public static final String f_barevnostB_STR = "barevnostB";
    public static final String f_barevnostE_STR = "barevnostE";
    public static final String f_hmotnost_STR = "hmotnost";
    public static final String f_barevnostKde_STR = "barevnostKde";
    //public static final String f_ = "";

    /**
     ***************************************************************************
     *
     * @param record
     * @return
     * @throws AddException
     */
    @Override
    public Record onCreateLocal(Record record) throws AddException {
        record = super.onCreateLocal(record);
        return record;
    }

    /**
     ***************************************************************************
     *
     * @param record
     * @return
     * @throws AddException
     * @throws ValidationException
     */
    @Override
    public Record onCreate(Record record) throws AddException, ValidationException {
        record = super.onCreate(record);
        return this.onCreateUpdate(record);
    }

    /**
     ***************************************************************************
     *
     * @param record
     * @return
     * @throws ValidationException
     * @throws UpdateException
     */
    @Override
    public Record onUpdate(Record record) throws ValidationException, UpdateException {
        record = super.onUpdate(record);
        return this.onCreateUpdate(record);
    }

    /**
     ***************************************************************************
     *
     * @param record
     * @return
     */
    private Record onCreateUpdate(Record rec) throws ValidationException {
        ValidationException vex = Exceptions.getValiadtionException(getTC());

        EvidenceMereniPrilohaEntity.formValidation(rec, getTC(), vex);

        if (vex.isGravid() && !vex.isWarning()) {
            throw vex;
        }
        return rec;
    }

    /**
     ***************************************************************************
     * 
     * @param rec
     * @param context
     * @param vex 
     */
    private static void formValidation(Record rec, TriggerContext context, ValidationException vex) {
        //kontrola hodnoty pH Obalha
        if (!Utils.isValid_pH(rec.getFieldValue(EvidenceMereniPrilohaEntity.f_merPH_STR))) {
            vex.addField(EvidenceMereniPrilohaEntity.f_merPH_STR, "Pole smí nabývat pouze hodnot 0 - 14", false);
        }
    }

}
