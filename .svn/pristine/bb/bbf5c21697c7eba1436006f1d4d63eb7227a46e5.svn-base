/*******************************************************************************
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

package cz.incad.czbrd;

import com.amaio.plaant.businessFunctions.AddException;
import com.amaio.plaant.businessFunctions.UpdateException;
import com.amaio.plaant.businessFunctions.ValidationException;
import com.amaio.plaant.sync.Record;
import cz.incad.relief3.core.Record_A;
import cz.incad.relief3.core.tools.DirectConnection;
import cz.incad.relief3.core.tools.NumericSeries;
import cz.incad.relief3.core.tools.ReliefLogger;
import cz.incad.relief3.core.tools.Utilities;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;

/*******************************************************************************
 *
 * @author martin
 */
public class EvidenceMereniEntity extends Record_A {
    public static final String f_posObalka              = "posObalka";
    public static final String f_posObalkaHodnota       = "posObalkaHodnota";
    public static final String f_fyzMaterial            = "fyzMaterial";
    public static final String f_fyzPH                  = "fyzPH";
    public static final String f_fyzOchrannyObal        = "fyzOchrannyObal";
    public static final String f_pObaMechChybCast       = "pObaMechChybCast";
    public static final String f_pObaMechPrehPrek       = "pObaMechPrehPrek";
    public static final String f_pObaMechCinHlodHmyz    = "pObaMechCinHlodHmyz";
    public static final String f_pObaMechKrehkost       = "pObaMechKrehkost";
    public static final String f_pObaMechLepPas         = "pObaMechLepPas";
    public static final String f_pObaMechNeni           = "pObaMechNeni";
    public static final String f_pObaBioHmyz            = "pObaBioHmyz";
    public static final String f_pObaBioHlodavci        = "pObaBioHlodavci";
    public static final String f_pObaBioPlisBak         = "pObaBioPlisBak";
    public static final String f_pObaBioNeni            = "pObaBioNeni";
    public static final String f_pObaChemVoda           = "pObaChemVoda";
    public static final String f_pObaChemJinTek         = "pObaChemJinTek";
    public static final String f_pObaChemMast           = "pObaChemMast";
    public static final String f_pObaChemPrach          = "pObaChemPrach";
    public static final String f_pObaChemTepPos         = "pObaChemTepPos";
    public static final String f_pObaChemBarSkv         = "pObaChemBarSkv";
    public static final String f_pObaChemNecTex         = "pObaChemNecTex";
    public static final String f_pObaChemZdeg           = "pObaChemZdeg";
    public static final String f_tEMPriloha_TAB         = "tEMPriloha";
    //public static final String f_ = "";

    /***************************************************************************
     * 
     * @param rec
     * @return
     * @throws AddException
     */
    @Override
    public Record onCreateLocal(Record rec) throws AddException {
        rec = super.onCreateLocal(rec);
        return rec;
    }

    /***************************************************************************
     *
     * @param rec
     * @return
     * @throws AddException
     * @throws ValidationException
     */
    @Override
    public Record onCreate(Record rec) throws AddException, ValidationException {
        rec = super.onCreate(rec);
        return this.onCreateUpdate(rec);
    }

    /***************************************************************************
     *
     * @param rec
     * @return
     * @throws ValidationException
     * @throws UpdateException
     */
    @Override
    public Record onUpdate(Record rec) throws ValidationException, UpdateException {
        rec = super.onUpdate(rec);
        return this.onCreateUpdate(rec);
    }

    /***************************************************************************
     *
     * @param rec
     * @return
     */
    private Record onCreateUpdate(Record rec) throws ValidationException {
//        Connection conn = DirectConnection.getConnection();
//        Statement stmt = null;
//        ResultSet rs = null;

        //Když je vybrána Obálka není, tak je hodnota nastavena na NULL
        if ("neni".equals(rec.getSimpleField(f_posObalka).getValue()) || rec.getSimpleField(f_posObalka).getValue() == null) {
            rec.getSimpleField(f_pObaMechChybCast).setValue(false);
            rec.getSimpleField(f_pObaMechPrehPrek).setValue(false);
            rec.getSimpleField(f_pObaMechCinHlodHmyz).setValue(false);
            rec.getSimpleField(f_pObaMechKrehkost).setValue(false);
            rec.getSimpleField(f_pObaMechLepPas).setValue(false);
            rec.getSimpleField(f_pObaMechNeni).setValue(false);
            rec.getSimpleField(f_pObaBioHmyz).setValue(false);
            rec.getSimpleField(f_pObaBioHlodavci).setValue(false);
            rec.getSimpleField(f_pObaBioPlisBak).setValue(false);
            rec.getSimpleField(f_pObaBioNeni).setValue(false);
            rec.getSimpleField(f_pObaChemVoda).setValue(false);
            rec.getSimpleField(f_pObaChemJinTek).setValue(false);
            rec.getSimpleField(f_pObaChemMast).setValue(false);
            rec.getSimpleField(f_pObaChemPrach).setValue(false);
            rec.getSimpleField(f_pObaChemTepPos).setValue(false);
            rec.getSimpleField(f_pObaChemBarSkv).setValue(false);
            rec.getSimpleField(f_pObaChemNecTex).setValue(false);
            rec.getSimpleField(f_pObaChemZdeg).setValue(false);
        }

//        //Když je vybrána Ochranný obal není, tak se nastaví na NULL materiál
//        if ("neni".equals(rec.getSimpleField(f_fyzOchrannyObal).getValue()) || rec.getSimpleField(f_fyzOchrannyObal).getValue() == null) {
//            rec.getSimpleField(f_fyzMaterial).setValue(null);
//        }
//
//        //Když je vybrána archivní lepenka, tak je vynulováno pole Materiál
//        if ("archivnilepenka".equals(rec.getSimpleField(f_fyzMaterial).getValue()) || rec.getSimpleField(f_fyzMaterial).getValue() == null) {
//            rec.getSimpleField(f_fyzPH).setValue(null);
//        }
//
//        //Kontrola na cislo zaznamu, aby nebylo duplicitni
//        try {
//            if (rec.getSimpleField(f_recID).getValue() != null) {
//                stmt = conn.createStatement();
//                rs = stmt.executeQuery("select count(recID) from EvidenceMereni where recID = '" + rec.getSimpleField(f_recID).getValue() + "'");
//                rs.next();
//                if (rs.getInt(1) > 1) {
//                    String seriename = Utilities.getClassNameEntity(getClass().getName()) + ".recID";
//                    Object nextNumber = NumericSeries.getNextNumber(getTC(), seriename);
//                    rec.getSimpleField(f_recID).setValue(nextNumber);
//                }
//            }
//        } catch (SQLException ex) {
//            ReliefLogger.severe("CHYBA: " + ex.getMessage());
//        } finally {
//            try {
//                if (rs != null) rs.close();
//                if (stmt != null) stmt.close();
//                if (conn != null) conn.close();
//            } catch(SQLException ex) {
//                ReliefLogger.severe("CHYBA PRI ZAVIRANI SPOJENI S DB: " + ex.getMessage());
//            } 
//        }
        return rec;
    }

}
